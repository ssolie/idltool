# This script is a codegen module for idltool.py.
#
# gen_prototype_file.py - Generates include/proto/<libname>.h files
# Copyright (C) 2021 Steven Solie
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>

class ProtoFile:
	""" Code generator to create library interface proto file.
	"""
	def __init__(self, spec_file):
		self.spec_file = spec_file
		self.out_file  = None

	def codegen(self, tool_version, out_dir):
		""" Code generate the library interface file.
		"""
		import os

		lib_spec = self.spec_file.library_spec()
		lib_name = lib_spec.attrib["name"]

		path = os.path.join(out_dir, 'include', 'proto')
		try:
			os.makedirs(path)
		except:
			pass

		path = os.path.join(path, lib_name + '.h')
		self.out_file = open(path, "w+")

		guard_label = 'PROTO_' + lib_name.upper() + '_H'

		basetype = lib_spec.get('basetype')
		if basetype == None:
			basetype = 'Library'

		self.put_header(guard_label, tool_version)
		self.putln()
		self.put_includes()
		self.put_barrier()
		self.put_base(basetype, lib_spec.attrib["basename"])
		self.put_barrier()

		LIB_NAME = lib_name.upper()
		self.putln('#ifdef __amigaos4__')
		self.putln(' #include <interfaces/' + lib_name + '.h>')
		self.putln(' #ifdef __USE_INLINE__')
		self.putln('  #include <inline4/' + lib_name + '.h>')
		self.putln(' #endif /* __USE_INLINE__ */')
		self.putln(' #ifndef CLIB_' + LIB_NAME + '_PROTOS_H')
		self.putln('  #define CLIB_' + LIB_NAME + '_PROTOS_H 1')
		self.putln(' #endif /* CLIB_' + LIB_NAME + '_PROTOS_H */')
		self.putln(' #ifndef __NOGLOBALIFACE__')

		for iface_spec in self.spec_file.interfaces_spec():
			self.put_global_iface(iface_spec)

		self.putln(' #endif /* __NOGLOBALIFACE__ */')
		self.putln('#else /* __amigaos4__ */')
		self.put_68k_includes(lib_name)
		self.putln('#endif /* __amigaos4__ */')

		self.put_barrier()
		self.put_footer(guard_label)

		self.out_file.close()

	def put(self, line=''):
		self.out_file.write(line)

	def putln(self, line=''):
		self.out_file.write(line + '\n')

	def put_header(self, guard_name, tool_version):
		self.putln('#ifndef ' + guard_name)
		self.putln('#define ' + guard_name)
		self.putln()
		self.putln('/*')
		self.putln('** This file was machine generated by idltool.py ' + tool_version + '.')
		self.putln('** Do not edit.')

		copyright = self.spec_file.library_spec().find('copyright')
		if copyright != None:
			self.putln('**')
			self.putln('** ' + copyright.text.strip())

		self.putln('**')
		self.putln('** Prototype/inline/pragma header file combo.')
		self.putln('*/')

	def put_includes(self):
		for spec in self.spec_file.includes_spec():
			name = spec.text.strip()
			self.putln('#include <' + name + '>')

	def put_barrier(self):
		self.putln()
		self.putln('/****************************************************************************/')
		self.putln()

	def put_base(self, basetype, basename):
		self.putln('#ifndef __NOLIBBASE__')
		self.putln(' #ifndef __USE_BASETYPE__')
		self.putln('  #if defined(__cplusplus) && defined(__USE_AMIGAOS_NAMESPACE__)')
		self.putln('   extern struct AmigaOS::Library * ' + basename + ';')
		self.putln('  #else')
		self.putln('   extern struct Library * ' + basename + ';')
		self.putln('  #endif')
		self.putln(' #else')
		self.putln('  #if defined(__cplusplus) && defined(__USE_AMIGAOS_NAMESPACE__)')
		self.putln('   extern struct AmigaOS::' + basetype + ' * ' + basename + ';')
		self.putln('  #else')
		self.putln('   extern struct ' + basetype + ' * ' + basename + ';')
		self.putln('  #endif')
		self.putln(' #endif /* __USE_BASETYPE__ */')
		self.putln('#endif /* __NOLIBBASE__ */')

	def put_global_iface(self, iface_spec):
		struct_name = iface_spec.attrib['struct']
		global_name = iface_spec.attrib['global']

		self.putln('  #if defined(__cplusplus) && defined(__USE_AMIGAOS_NAMESPACE__)')
		self.putln('   extern struct AmigaOS::' + struct_name + ' * ' + global_name + ';')
		self.putln('  #else')
		self.putln('   extern struct ' + struct_name + ' * ' + global_name + ';')
		self.putln('  #endif')

	def put_68k_includes(self, lib_name):
		LIB_NAME = lib_name.upper()
		self.putln(' #ifndef CLIB_' + LIB_NAME + '_PROTOS_H')
		self.putln('  #include <clib/' + lib_name + '_protos.h>')
		self.putln(' #endif /* CLIB_' + LIB_NAME + '_PROTOS_H */')
		self.putln(' #if defined(__GNUC__)')
		self.putln('  #ifndef __PPC__')
		self.putln('   #include <inline/' + lib_name + '.h>')
		self.putln('  #else /* __PPC__ */')
		self.putln('   #include <ppcinline/' + lib_name + '.h>')
		self.putln('  #endif /* __PPC__ */')
		self.putln(' #elif defined(__VBCC__)')
		self.putln('  #ifndef __PPC__')
		self.putln('   #include <inline/' + lib_name + '_protos.h>')
		self.putln('  #endif /* __PPC__ */')
		self.putln(' #else /* __GNUC__ */')
		self.putln('  #include <pragmas/' + lib_name + '_pragmas.h>')
		self.putln(' #endif /* __GNUC__ */')

	def put_footer(self, guard_name):
		self.putln('#endif /* ' + guard_name + ' */')
